uninformed search 

complete- search that finds a solution (if one exists) 
optimal- finds the best solution 

state- problem state (e.g. "Arad")
node-has a state, a parent, possibly children, possibly cost (e.g. "Arad", "Sibiu", 220)

branching factor- number of child nodes per parent node

depth- distance from root to deepest node 


big O and trees 

given a branching factor of b and a depth m, how many nodes are in the tree? 

depth 0, 1 node 
depth 1, b nodes 
depth 2, b^2 nodes
depth 3, b^3 nodes 
....
depth m, b^m 

Total number of nodes 
1 + b + b^2 + b^3 + ... + b^m = (1-b^(m+1))/(1-b) 
O(b^m)

tree search 
frontier = {root}
while no solution and frontier is not empty
	curNode = frontier.getNode()
	check if it's the solution 
	add children of curNode to frontier 
	

graph search (don't repeat states) 
Collection<Node> frontier = {root}
Collection<State> visited = {root}
while no solution and frontier is not empty
	curNode = frontier.getNode()
	
	check if it's the solution 
	for child in children of curNode 
		
		if child is not in visited 
			frontier.add(child) 
		visited.add(child)
	
What data structure is frontier?
stack- depth first search 
complete? depends if its graph (yes) or tree (no, could get in an infinite loop)
Arad, Sibiu, Arad, Sibiu, Arad, Sibiu, ...
optimal? 
no 
space? 
O(bm) 
speed? 
O(b^m) 

queue- breadth first search 
complete?
yes 
optimal? 
yes 
space? 
O(b^(m-1))
speed?
O(b^m) 

depth limited search- depth first search, but stop if you hit a particular depth d 
complete? 
yes if d>=m, no generally 
optimal? 
no 
space?
O(bd)
speed?
O(b^d) 

iterative deepening 
do a depth limited search.  If it fails, increase depth by 1.
DLS(1), then DLS(2), then DLS(3), ... , DLS(m)
complete? 
yes 
optimal? 
yes 
space?
O(m) 
speed? 
O(b^m)

DLS(0) takes 1
DLS(1) takes b
DLS(2) takes b^2 
DLS(3) takes b^3
....
DLS(m) takes b^m 
1+b+b^2+b^3+...+b^m=O(b^m)


priority queue (ordered by current cost)- uniform cost 
(same issues as bfs) 

	
puzzle 
https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/fifteen.html


frontier = {initial node}
explored = {}
while frontier isn't empty:
	choose a node N from the frontier, return N if it's a solution
		bfs, queue
		dfs, stack
		uniform cost, priority queue ranked on current distance 
	expand N
		add new nodes to the frontier 
			(don't add nodes already explored)
		depth limited: don't expand if past depth 
	
	
if frontier is empty, return fail


arad to bucharest 

bfs 
arad 

sibiu (arad)
timisoara (arad)
zerind (arad)

fagaras (sibiu)
oradea (sibiu)
rimnicu vilcea (sibiu)
lugoj (timosoara) 

bucharest (fagaras)
pitesti (rimnicu vilcea)
craiova (rimnicu vilcea)
mehadia (lugoj)

expand bucharest (found solution) 
found the shortest path in nodes, not in distance 

dfs 

cur node			stack 
					arad 
arad				zerind, timisoara, sibiu
zerind (arad)		oradea, timisoara, sibiu
oradea	(arad)		timisoara, sibiu
timisoara (arad)	lugoj, sibiu 
lugoj (timi)		mehadia, sibiu 
mehadia	(lugoj)		dobreta, sibiu 
dobreta (mehadia)	craiova, sibiu 
craiova (dobreta)	rimnicu vilcea, pitesti, sibiu
rimnicu vilcea 		pitesti, sibiu
pitesti				bucharest, sibiu 
bucharest			sibiu


we can implement dfs and bfs as special cases of uniform cost 
bfs: cost is number of nodes visited 
dfs: cost is -(number of nodes visited) 


uniform cost 	priority queue
				(arad, 0)
(arad, 0)		(sibiu, 140), (timisoara, 118), (zerind, 75)
(zerind, 75)	(oradea, 71+75=146), (sibiu, 140), (timisoara, 118)
(timisoara, 118) (lugoj, 118+111=229), (oradea, 146), (sibiu, 140)
(sibiu, 140)	(lugoj, 229), (oradea, 146), (rv, 220), (fagaras, 239)
(oradea, 146)	(lugoj, 229), (rv, 220), (fagaras, 239)
(rv, 220)		(lugoj, 229), (pitesti, 317), (craiova, 366),(fagaras, 239)
	
	
current node		priority queue 
					(s, 0)
(s, 0)				(a, 1), (b,2)
(a, 1)				(b,2), (c,4)
(b,2)				(c,3), (c,4)
(c,3)				(c,4), (t,4)
(c,4) ignore		(t,4)
(t,4)
	
Either, you need a way to update nodes in the priority queue, or add a new node with the same state (and deal with extra node when it comes off).	


A* search 
priority queue search 
f - evaluation function
g - cost function 

f = g -> uniform cost 

h - heuristic function (guess at the distance to the goal) 

A*
f = g + h 
	
greedy best first search 
f = h 	

	
	
	
	
	
	
	
	
	
	
	
	